6
Aim- Consider the following grammar: S --> ABC A--> abA | ab B--> b | BC C--> c 
| cC Following any suitable parsing technique (prefer top-down), design 
a parser which accepts a string and tells whether the string is accepted by above 
grammar or not. 
Code- 
#include <stdio.h> 
#include <string.h> 
char input[100]; 
int pos = 0; 
// Function prototypes 
int S(); 
int A(); 
int B(); 
int C(); 
int S() { 
int backup = pos; 
if (A()) { 
if (B()) { 
if (C()) { 
return 1; 
} 
} 
} 
pos = backup; // backtrack if fails 
return 0; 
} 
int A() { 
int backup = pos; 
if (input[pos] == 'a' && input[pos + 1] == 'b') { 
pos += 2; 
if (A()) { 
return 1; 
} 
pos = backup + 2; // try ab only 
return 1; 
} 
pos = backup; 
return 0; 
} 
int B() { 
int backup = pos; 
if (input[pos] == 'b') { 
pos++; 
return 1; 
} 
if (B() && C()) { 
return 1; 
} 
pos = backup; 
return 0; 
} 
int C() { 
int backup = pos; 
if (input[pos] == 'c') { 
pos++; 
if (C()) { 
return 1; 
} 
return 1; 
} 
pos = backup; 
return 0; 
} 
int main() { 
printf("Enter the string to be parsed: "); 
scanf("%s", input); 
if (S() && input[pos] == '\0') { 
printf("String is accepted.\n"); 
} else { 
printf("String is not accepted.\n"); 
} 
return 0; 
}
